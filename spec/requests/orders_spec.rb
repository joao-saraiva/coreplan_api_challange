require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/orders", type: :request do

  # Order. As you add validations to Order, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryBot.attributes_for(:order, order_products_attributes: [
      FactoryBot.attributes_for(:order_product),
      FactoryBot.attributes_for(:order_product, :mother_board), 
      FactoryBot.attributes_for(:order_product, :ram), 
      FactoryBot.attributes_for(:order_product, :graphic_card)
    ])
  }

  let(:invalid_attributes) {
    FactoryBot.attributes_for(:order, :complete_multiple_memories)
  }

  describe "GET /index" do
    it "renders a successful response" do
      Order.create! valid_attributes
      get orders_url, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      order = Order.create! valid_attributes
      get order_url(order), as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_order_url, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      order = Order.create! valid_attributes
      get edit_order_url(order), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Order" do
        expect {
          post orders_url,as: :json, params: { order: valid_attributes }
        }.to change(Order, :count).by(1)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Order" do
        expect {
          post orders_url, as: :json, params: { order: invalid_attributes }
        }.to change(Order, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post orders_url, as: :json, params: { order: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        FactoryBot.attributes_for(:order, order_products_attributes: [
          FactoryBot.attributes_for(:order_product, id: "1"),
          FactoryBot.attributes_for(:order_product, :mother_board, id: "2"), 
          FactoryBot.attributes_for(:order_product, :ram, id: "3"), 
          FactoryBot.attributes_for(:order_product, :graphic_card, id: "4")
        ])
      }

      it "redirects to the order" do
        order = Order.create! valid_attributes
        patch order_url(order), as: :json, params: { order: new_attributes }
        order.reload

        expect(response).to be_successful
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        order = Order.create! valid_attributes
        patch order_url(order), as: :json, params: { order: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested order" do
      order = Order.create! valid_attributes
      expect {
        delete order_url(order), as: :json
      }.to change(Order, :count).by(-1)
    end

    it "redirects to the orders list" do
      order = Order.create! valid_attributes
      delete order_url(order), as: :json
      expect(response).to be_successful
    end
  end
end
